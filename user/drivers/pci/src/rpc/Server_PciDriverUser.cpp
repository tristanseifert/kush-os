/*
 * This RPC server stub was autogenerated by idlc. DO NOT EDIT!
 * Generated from UserClient.idl for interface PciDriverUser at 2021-06-17T13:20:46-0500
 *
 * You should subclass this implementation and define the required abstract methods to complete
 * implementing the interface. Note that there are several helper methods available to simplify
 * this task, or to retrieve more information about the caller.
 *
 * See the full RPC documentation for more details.
 */
#include "Server_PciDriverUser.hpp"
#include "PciDriverUser.capnp.h"

#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <stdexcept>

#include <rpc/rt/RpcIoStream.hpp>

#include <capnp/message.h>
#include <capnp/serialize.h>

using namespace rpc;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
using Server = PciDriverUserServer;

// stubs for custom type serialization
template<typename... _blah>
constexpr auto TemplatedFalseFlag = false;

template<typename T>
inline bool deserialize(const std::span<std::byte> &, T &) {
    static_assert(TemplatedFalseFlag<T>, "rpc::deserialize not implemented for custom type");
}
template<typename T>
inline bool serialize(std::vector<std::byte> &, const T &) {
    static_assert(TemplatedFalseFlag<T>, "rpc::serialize not implemented for custom type");
}
/**
 * Creates a new server instance, with the given IO stream.
 */
Server::PciDriverUserServer(const std::shared_ptr<IoStream> &stream) : io(stream) {
}

/**
 * Releases any allocated resources.
 */
Server::~PciDriverUserServer() {
    if(this->txBuf) {
        free(this->txBuf);
    }
}

/**
 * Continuously processes messages until processing fails to receive another message.
 */
bool Server::run(const bool block) {
    bool cont;
    do {
        cont = this->runOne(block);
    } while(cont);
    return cont;
}

/**
 * Reads a single message from the RPC connection and attempts to process it.
 *
 * @throws If the received message is malformed.
 *
 * @return Whether a message was able to be received and processed.
 */
bool Server::runOne(const bool block) {
    // try to receive message
    std::span<std::byte> buf;
    if(!this->io->receive(buf, block)) return false;

    // get the message header and its payload
    if(buf.size() < sizeof(MessageHeader)) throw std::runtime_error("Received message too small");
    const auto hdr = reinterpret_cast<const MessageHeader *>(buf.data());

    const auto payload = buf.subspan(offsetof(MessageHeader, payload));

    // then invoke the appropriate marshalling function
    switch(hdr->type) {
        case rpc::_proto::messages::MESSAGE_ID_GET_DEVICE_AT:
            this->_marshallGetDeviceAt(*hdr, payload);
            break;
        case rpc::_proto::messages::MESSAGE_ID_READ_CFG_SPACE32:
            this->_marshallReadCfgSpace32(*hdr, payload);
            break;
        case rpc::_proto::messages::MESSAGE_ID_WRITE_CFG_SPACE32:
            this->_marshallWriteCfgSpace32(*hdr, payload);
            break;
    }
    return true;
}



// Helper method to build and send a reply message
void Server::_doSendReply(const MessageHeader &inHdr, const std::span<std::byte> &payload) {
    const size_t len = sizeof(MessageHeader) + payload.size();
    this->_ensureTxBuf(len);

    auto hdr = reinterpret_cast<MessageHeader *>(this->txBuf);
    memset(hdr, 0, sizeof(*hdr));
    hdr->type = inHdr.type;
    hdr->flags = MessageHeader::Flags::Response;
    hdr->tag = inHdr.tag;

    memcpy(hdr->payload, payload.data(), payload.size());

    const std::span<std::byte> txBufSpan(reinterpret_cast<std::byte *>(this->txBuf), len);
    if(!this->io->reply(txBufSpan)) {
        throw std::runtime_error("Failed to send RPC reply");
    }
}

// Allocates an aligned transmit buffer of the given size
void Server::_ensureTxBuf(const size_t len) {
    if(len > this->txBufSize) {
        if(this->txBuf) {
            free(this->txBuf);
        }
        int err = posix_memalign(&this->txBuf, 16, len);
        if(err) {
            throw std::runtime_error("Failed to allocate RPC send buffer");
        }
        this->txBufSize = len;
    }
}
/*
 * Autogenerated marshalling method for 'GetDeviceAt' (id $d5b64160331233f1)
 * Have 1 parameter(s), 1 return(s); method is sync
 */
void Server::_marshallGetDeviceAt(const MessageHeader &hdr, const std::span<std::byte> &payload) {
    kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
            payload.size() / sizeof(capnp::word));
    capnp::FlatArrayMessageReader reader(message);
    auto request = reader.getRoot<rpc::_proto::messages::GetDeviceAtRequest>();
    const auto dec_temp_address = request.getAddress();
    const std::span<std::byte> dec_raw_address(reinterpret_cast<std::byte *>(const_cast<unsigned char *>(dec_temp_address.begin())), dec_temp_address.size());
    libpci::BusAddress dec_address;
    rpc::deserialize(dec_raw_address, dec_address);

    auto retVal = this->implGetDeviceAt(dec_address);

    capnp::MallocMessageBuilder replyBuilder;
    auto reply = replyBuilder.initRoot<rpc::_proto::messages::GetDeviceAtResponse>();
    reply.setPath(retVal);
    {
        auto rw = capnp::messageToFlatArray(replyBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        this->_doSendReply(hdr, rs);
    }
}
/*
 * Autogenerated marshalling method for 'ReadCfgSpace32' (id $441bae330756a108)
 * Have 2 parameter(s), 1 return(s); method is sync
 */
void Server::_marshallReadCfgSpace32(const MessageHeader &hdr, const std::span<std::byte> &payload) {
    kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
            payload.size() / sizeof(capnp::word));
    capnp::FlatArrayMessageReader reader(message);
    auto request = reader.getRoot<rpc::_proto::messages::ReadCfgSpace32Request>();
    const auto dec_temp_address = request.getAddress();
    const std::span<std::byte> dec_raw_address(reinterpret_cast<std::byte *>(const_cast<unsigned char *>(dec_temp_address.begin())), dec_temp_address.size());
    libpci::BusAddress dec_address;
    rpc::deserialize(dec_raw_address, dec_address);
    const auto dec_offset = request.getOffset();

    auto retVal = this->implReadCfgSpace32(dec_address, dec_offset);

    capnp::MallocMessageBuilder replyBuilder;
    auto reply = replyBuilder.initRoot<rpc::_proto::messages::ReadCfgSpace32Response>();
    reply.setResult(retVal);
    {
        auto rw = capnp::messageToFlatArray(replyBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        this->_doSendReply(hdr, rs);
    }
}
/*
 * Autogenerated marshalling method for 'WriteCfgSpace32' (id $de92bb2db0b09f5d)
 * Have 3 parameter(s), 0 return(s); method is sync
 */
void Server::_marshallWriteCfgSpace32(const MessageHeader &hdr, const std::span<std::byte> &payload) {
    kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
            payload.size() / sizeof(capnp::word));
    capnp::FlatArrayMessageReader reader(message);
    auto request = reader.getRoot<rpc::_proto::messages::WriteCfgSpace32Request>();
    const auto dec_temp_address = request.getAddress();
    const std::span<std::byte> dec_raw_address(reinterpret_cast<std::byte *>(const_cast<unsigned char *>(dec_temp_address.begin())), dec_temp_address.size());
    libpci::BusAddress dec_address;
    rpc::deserialize(dec_raw_address, dec_address);
    const auto dec_offset = request.getOffset();
    const auto dec_value = request.getValue();

    this->implWriteCfgSpace32(dec_address, dec_offset, dec_value);

    capnp::MallocMessageBuilder replyBuilder;
    auto reply = replyBuilder.initRoot<rpc::_proto::messages::WriteCfgSpace32Response>();
    {
        auto rw = capnp::messageToFlatArray(replyBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        this->_doSendReply(hdr, rs);
    }
}
#pragma clang diagnostic pop
