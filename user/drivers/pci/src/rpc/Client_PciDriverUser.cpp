/*
 * This RPC client stub was autogenerated by idlc. DO NOT EDIT!
 * Generated from UserClient.idl for interface PciDriverUser at 2021-06-20T13:48:30-0500
 *
 * You may use these generated stubs directly as the RPC interface, or you can subclass it to
 * override the behavior of the function calls, or to perform some preprocessing to the data as
 * needed before sending it.
 *
 * See the full RPC documentation for more details.
 */
#include "Client_PciDriverUser.hpp"
#include "PciDriverUser.capnp.h"

#include <algorithm>
#include <cstdlib>
#include <cstdio>
#include <cstring>

#include <capnp/message.h>
#include <capnp/serialize.h>

#include <rpc/rt/RpcIoStream.hpp>

using namespace rpc;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
using Client = PciDriverUserClient;

// stubs for custom type serialization
template<typename... _blah>
constexpr auto TemplatedFalseFlag = false;

template<typename T>
inline bool deserialize(const std::span<std::byte> &, T &) {
    static_assert(TemplatedFalseFlag<T>, "rpc::deserialize not implemented for custom type");
}
template<typename T>
inline bool serialize(std::vector<std::byte> &, const T &) {
    static_assert(TemplatedFalseFlag<T>, "rpc::serialize not implemented for custom type");
}
/**
 * Creates a new client instance, with the given IO stream.
 */
Client::PciDriverUserClient(const std::shared_ptr<IoStream> &stream) : io(stream) {
}

/**
 * Shuts down the RPC client, releasing any allocated resources.
 */
Client::~PciDriverUserClient() {
    if(this->txBuf) {
        free(this->txBuf);
    }
}

/// Assemble a message with the given type.
uint32_t Client::_sendRequest(const uint64_t type, const std::span<std::byte> &payload) {
    const size_t len = sizeof(MessageHeader) + payload.size();
    this->_ensureTxBuf(len);

    const auto tag = __atomic_add_fetch(&this->nextTag, 1, __ATOMIC_RELAXED);
    auto hdr = reinterpret_cast<MessageHeader *>(this->txBuf);
    memset(hdr, 0, sizeof(*hdr));
    hdr->type = type;
    hdr->flags = MessageHeader::Flags::Request;
    hdr->tag = tag;

    memcpy(hdr->payload, payload.data(), payload.size());

    const std::span<std::byte> txBufSpan(reinterpret_cast<std::byte *>(this->txBuf), len);
    if(!this->io->sendRequest(txBufSpan)) {
        this->_HandleError(true, "Failed to send RPC request");
        return 0;
    }

    return tag;
}

// Allocates an aligned transmit buffer of the given size
void Client::_ensureTxBuf(const size_t len) {
    if(len > this->txBufSize) {
        if(this->txBuf) {
            free(this->txBuf);
        }
        int err = posix_memalign(&this->txBuf, 16, len);
        if(err) {
            return this->_HandleError(true, "Failed to allocate RPC send buffer");
        }
        this->txBufSize = len;
    }
}

/**
 * Handles an error that occurred on the client connection. Implementations may override this
 * method if they want to use exceptions, for example.
 *
 * @param fatal If set, the error precludes further operation on this RPC connection
 * @param what Descriptive string for the error
 */
void Client::_HandleError(const bool fatal, const std::string_view &what) {
    fprintf(stderr, "[RPC] %s: Encountered %s RPC error: %s\n", kServiceName.data(),
        fatal ? "fatal" : "recoverable", what.data());
}
/*
 * Autogenerated call method for 'GetDeviceAt' (id $d5b64160331233f1)
 * Have 1 parameter(s), 1 return(s); method is sync
 */
std::string Client::GetDeviceAt(const libpci::BusAddress &address) {
    uint32_t sentTag;
    {
        capnp::MallocMessageBuilder requestBuilder;
        auto request = requestBuilder.initRoot<rpc::_proto::messages::GetDeviceAtRequest>();
        std::vector<std::byte> blobTemp_address;
        rpc::serialize(blobTemp_address, address);
        capnp::Data::Reader blobReader_address(reinterpret_cast<const kj::byte *>(blobTemp_address.data()), blobTemp_address.size());
        request.setAddress(blobReader_address);
        auto rw = capnp::messageToFlatArray(requestBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        sentTag = this->_sendRequest(rpc::_proto::messages::MESSAGE_ID_GET_DEVICE_AT, rs);
    }
    {
        std::span<std::byte> buf;
        if(!this->io->receiveReply(buf)) this->_HandleError(false, "Failed to receive RPC reply");
        if(buf.size() < sizeof(MessageHeader)) this->_HandleError(false, "Received message too small");
        const auto hdr = reinterpret_cast<const MessageHeader *>(buf.data());
        if(hdr->tag != sentTag) this->_HandleError(false, "Invalid tag in reply RPC packet");
        else if(hdr->type != rpc::_proto::messages::MESSAGE_ID_GET_DEVICE_AT) this->_HandleError(false, "Invalid type in reply RPC packet");
        const auto payload = buf.subspan(offsetof(MessageHeader, payload));

        kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
                payload.size() / sizeof(capnp::word));
        capnp::FlatArrayMessageReader reader(message);
        auto reply = reader.getRoot<rpc::_proto::messages::GetDeviceAtResponse>();
        return reply.getPath();
    }
}
/*
 * Autogenerated call method for 'ReadCfgSpace32' (id $441bae330756a108)
 * Have 2 parameter(s), 1 return(s); method is sync
 */
uint32_t Client::ReadCfgSpace32(const libpci::BusAddress &address, uint16_t offset) {
    uint32_t sentTag;
    {
        capnp::MallocMessageBuilder requestBuilder;
        auto request = requestBuilder.initRoot<rpc::_proto::messages::ReadCfgSpace32Request>();
        std::vector<std::byte> blobTemp_address;
        rpc::serialize(blobTemp_address, address);
        capnp::Data::Reader blobReader_address(reinterpret_cast<const kj::byte *>(blobTemp_address.data()), blobTemp_address.size());
        request.setAddress(blobReader_address);
        request.setOffset(offset);
        auto rw = capnp::messageToFlatArray(requestBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        sentTag = this->_sendRequest(rpc::_proto::messages::MESSAGE_ID_READ_CFG_SPACE32, rs);
    }
    {
        std::span<std::byte> buf;
        if(!this->io->receiveReply(buf)) this->_HandleError(false, "Failed to receive RPC reply");
        if(buf.size() < sizeof(MessageHeader)) this->_HandleError(false, "Received message too small");
        const auto hdr = reinterpret_cast<const MessageHeader *>(buf.data());
        if(hdr->tag != sentTag) this->_HandleError(false, "Invalid tag in reply RPC packet");
        else if(hdr->type != rpc::_proto::messages::MESSAGE_ID_READ_CFG_SPACE32) this->_HandleError(false, "Invalid type in reply RPC packet");
        const auto payload = buf.subspan(offsetof(MessageHeader, payload));

        kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
                payload.size() / sizeof(capnp::word));
        capnp::FlatArrayMessageReader reader(message);
        auto reply = reader.getRoot<rpc::_proto::messages::ReadCfgSpace32Response>();
        return reply.getResult();
    }
}
/*
 * Autogenerated call method for 'WriteCfgSpace32' (id $de92bb2db0b09f5d)
 * Have 3 parameter(s), 0 return(s); method is sync
 */
void Client::WriteCfgSpace32(const libpci::BusAddress &address, uint16_t offset, uint32_t value) {
    uint32_t sentTag;
    {
        capnp::MallocMessageBuilder requestBuilder;
        auto request = requestBuilder.initRoot<rpc::_proto::messages::WriteCfgSpace32Request>();
        std::vector<std::byte> blobTemp_address;
        rpc::serialize(blobTemp_address, address);
        capnp::Data::Reader blobReader_address(reinterpret_cast<const kj::byte *>(blobTemp_address.data()), blobTemp_address.size());
        request.setAddress(blobReader_address);
        request.setOffset(offset);
        request.setValue(value);
        auto rw = capnp::messageToFlatArray(requestBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        sentTag = this->_sendRequest(rpc::_proto::messages::MESSAGE_ID_WRITE_CFG_SPACE32, rs);
    }
    {
        std::span<std::byte> buf;
        if(!this->io->receiveReply(buf)) this->_HandleError(false, "Failed to receive RPC reply");
        if(buf.size() < sizeof(MessageHeader)) this->_HandleError(false, "Received message too small");
        const auto hdr = reinterpret_cast<const MessageHeader *>(buf.data());
        if(hdr->tag != sentTag) this->_HandleError(false, "Invalid tag in reply RPC packet");
        else if(hdr->type != rpc::_proto::messages::MESSAGE_ID_WRITE_CFG_SPACE32) this->_HandleError(false, "Invalid type in reply RPC packet");
        const auto payload = buf.subspan(offsetof(MessageHeader, payload));

        kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
                payload.size() / sizeof(capnp::word));
        capnp::FlatArrayMessageReader reader(message);
        auto reply = reader.getRoot<rpc::_proto::messages::WriteCfgSpace32Response>();

    }
}
#pragma clang diagnostic pop
