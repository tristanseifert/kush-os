/*
 * This RPC server stub was autogenerated by idlc. DO NOT EDIT!
 * Generated from Driverman.idl for interface Driverman at 2021-06-24T01:09:39-0500
 *
 * You should subclass this implementation and define the required abstract methods to complete
 * implementing the interface. Note that there are several helper methods available to simplify
 * this task, or to retrieve more information about the caller.
 *
 * See the full RPC documentation for more details.
 */
#include "Server_Driverman.hpp"
#include "Driverman.capnp.h"

#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <stdexcept>

#include <rpc/rt/RpcIoStream.hpp>

#include <capnp/message.h>
#include <capnp/serialize.h>

using namespace rpc;

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
using Server = DrivermanServer;

/**
 * Creates a new server instance, with the given IO stream.
 */
Server::DrivermanServer(const std::shared_ptr<IoStream> &stream) : io(stream) {
}

/**
 * Releases any allocated resources.
 */
Server::~DrivermanServer() {
    if(this->txBuf) {
        free(this->txBuf);
    }
}

/**
 * Continuously processes messages until processing fails to receive another message.
 */
bool Server::run(const bool block) {
    bool cont;
    do {
        cont = this->runOne(block);
    } while(cont);
    return cont;
}

/**
 * Reads a single message from the RPC connection and attempts to process it.
 *
 * @return Whether a message was able to be received and processed.
 */
bool Server::runOne(const bool block) {
    // try to receive message
    std::span<std::byte> buf;
    if(!this->io->receive(buf, block)) return false;

    // get the message header and its payload
    if(buf.size() < sizeof(MessageHeader)) {
        this->_HandleError(false, "Received message too small");
        return false;
    }
    const auto hdr = reinterpret_cast<const MessageHeader *>(buf.data());

    const auto payload = buf.subspan(offsetof(MessageHeader, payload));

    // then invoke the appropriate marshalling function
    switch(hdr->type) {
        case rpc::_proto::messages::MESSAGE_ID_ADD_DEVICE:
            this->_marshallAddDevice(*hdr, payload);
            break;
        case rpc::_proto::messages::MESSAGE_ID_SET_DEVICE_PROPERTY:
            this->_marshallSetDeviceProperty(*hdr, payload);
            break;
        case rpc::_proto::messages::MESSAGE_ID_GET_DEVICE_PROPERTY:
            this->_marshallGetDeviceProperty(*hdr, payload);
            break;
        case rpc::_proto::messages::MESSAGE_ID_START_DEVICE:
            this->_marshallStartDevice(*hdr, payload);
            break;
        case rpc::_proto::messages::MESSAGE_ID_STOP_DEVICE:
            this->_marshallStopDevice(*hdr, payload);
            break;
        case rpc::_proto::messages::MESSAGE_ID_NOTIFY:
            this->_marshallNotify(*hdr, payload);
            break;
    }
    return true;
}



// Helper method to build and send a reply message
void Server::_doSendReply(const MessageHeader &inHdr, const std::span<std::byte> &payload) {
    const size_t len = sizeof(MessageHeader) + payload.size();
    this->_ensureTxBuf(len);

    auto hdr = reinterpret_cast<MessageHeader *>(this->txBuf);
    memset(hdr, 0, sizeof(*hdr));
    hdr->type = inHdr.type;
    hdr->flags = MessageHeader::Flags::Response;
    hdr->tag = inHdr.tag;

    memcpy(hdr->payload, payload.data(), payload.size());

    const std::span<std::byte> txBufSpan(reinterpret_cast<std::byte *>(this->txBuf), len);
    if(!this->io->reply(txBufSpan)) {
        this->_HandleError(false, "Failed to send RPC reply");
    }
}

// Allocates an aligned transmit buffer of the given size
void Server::_ensureTxBuf(const size_t len) {
    if(len > this->txBufSize) {
        if(this->txBuf) {
            free(this->txBuf);
        }
        int err = posix_memalign(&this->txBuf, 16, len);
        if(err) {
            this->_HandleError(true, "Failed to allocate RPC send buffer");
        }
        this->txBufSize = len;
    }
}

/**
 * Handles an error that occurred on the server connection. Implementations may override this
 * method if they want to use exceptions, for example.
 *
 * @param fatal If set, the error precludes further operation on this RPC connection
 * @param what Descriptive string for the error
 */
void Server::_HandleError(const bool fatal, const std::string_view &what) {
    fprintf(stderr, "[RPC] %s: Encountered %s RPC error: %s\n", kServiceName.data(),
        fatal ? "fatal" : "recoverable", what.data());
    if(fatal) exit(-1);
}
/*
 * Autogenerated marshalling method for 'addDevice' (id $e2cd5678129683fe)
 * Have 2 parameter(s), 1 return(s); method is sync
 */
void Server::_marshallAddDevice(const MessageHeader &hdr, const std::span<std::byte> &payload) {
    kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
            payload.size() / sizeof(capnp::word));
    capnp::FlatArrayMessageReader reader(message);
    auto request = reader.getRoot<rpc::_proto::messages::AddDeviceRequest>();
    const std::string dec_parent(request.getParent());
    const std::string dec_driverId(request.getDriverId());

    auto retVal = this->implAddDevice(dec_parent, dec_driverId);

    capnp::MallocMessageBuilder replyBuilder;
    auto reply = replyBuilder.initRoot<rpc::_proto::messages::AddDeviceResponse>();
    reply.setPath(retVal);
    {
        auto rw = capnp::messageToFlatArray(replyBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        this->_doSendReply(hdr, rs);
    }
}
/*
 * Autogenerated marshalling method for 'setDeviceProperty' (id $9bd9cc73d64e045b)
 * Have 3 parameter(s), 0 return(s); method is sync
 */
void Server::_marshallSetDeviceProperty(const MessageHeader &hdr, const std::span<std::byte> &payload) {
    kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
            payload.size() / sizeof(capnp::word));
    capnp::FlatArrayMessageReader reader(message);
    auto request = reader.getRoot<rpc::_proto::messages::SetDevicePropertyRequest>();
    const std::string dec_path(request.getPath());
    const std::string dec_key(request.getKey());
    const auto dec_temp_data = request.getData();
    const std::span<std::byte> dec_data(reinterpret_cast<std::byte *>(const_cast<unsigned char *>(dec_temp_data.begin())), dec_temp_data.size());

    this->implSetDeviceProperty(dec_path, dec_key, dec_data);

    capnp::MallocMessageBuilder replyBuilder;
    auto reply = replyBuilder.initRoot<rpc::_proto::messages::SetDevicePropertyResponse>();
    {
        auto rw = capnp::messageToFlatArray(replyBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        this->_doSendReply(hdr, rs);
    }
}
/*
 * Autogenerated marshalling method for 'getDeviceProperty' (id $633375a0eade91a1)
 * Have 2 parameter(s), 1 return(s); method is sync
 */
void Server::_marshallGetDeviceProperty(const MessageHeader &hdr, const std::span<std::byte> &payload) {
    kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
            payload.size() / sizeof(capnp::word));
    capnp::FlatArrayMessageReader reader(message);
    auto request = reader.getRoot<rpc::_proto::messages::GetDevicePropertyRequest>();
    const std::string dec_path(request.getPath());
    const std::string dec_key(request.getKey());

    auto retVal = this->implGetDeviceProperty(dec_path, dec_key);

    capnp::MallocMessageBuilder replyBuilder;
    auto reply = replyBuilder.initRoot<rpc::_proto::messages::GetDevicePropertyResponse>();
    capnp::Data::Reader blobReader_data(reinterpret_cast<const kj::byte *>(retVal.data()), retVal.size());
    reply.setData(blobReader_data);
    {
        auto rw = capnp::messageToFlatArray(replyBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        this->_doSendReply(hdr, rs);
    }
}
/*
 * Autogenerated marshalling method for 'StartDevice' (id $6a7cbf9e2efa75f0)
 * Have 1 parameter(s), 1 return(s); method is sync
 */
void Server::_marshallStartDevice(const MessageHeader &hdr, const std::span<std::byte> &payload) {
    kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
            payload.size() / sizeof(capnp::word));
    capnp::FlatArrayMessageReader reader(message);
    auto request = reader.getRoot<rpc::_proto::messages::StartDeviceRequest>();
    const std::string dec_path(request.getPath());

    auto retVal = this->implStartDevice(dec_path);

    capnp::MallocMessageBuilder replyBuilder;
    auto reply = replyBuilder.initRoot<rpc::_proto::messages::StartDeviceResponse>();
    reply.setStatus(retVal);
    {
        auto rw = capnp::messageToFlatArray(replyBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        this->_doSendReply(hdr, rs);
    }
}
/*
 * Autogenerated marshalling method for 'StopDevice' (id $ee8b158787490a80)
 * Have 1 parameter(s), 1 return(s); method is sync
 */
void Server::_marshallStopDevice(const MessageHeader &hdr, const std::span<std::byte> &payload) {
    kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
            payload.size() / sizeof(capnp::word));
    capnp::FlatArrayMessageReader reader(message);
    auto request = reader.getRoot<rpc::_proto::messages::StopDeviceRequest>();
    const std::string dec_path(request.getPath());

    auto retVal = this->implStopDevice(dec_path);

    capnp::MallocMessageBuilder replyBuilder;
    auto reply = replyBuilder.initRoot<rpc::_proto::messages::StopDeviceResponse>();
    reply.setStatus(retVal);
    {
        auto rw = capnp::messageToFlatArray(replyBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        this->_doSendReply(hdr, rs);
    }
}
/*
 * Autogenerated marshalling method for 'Notify' (id $63ce1044c4349828)
 * Have 2 parameter(s), 1 return(s); method is sync
 */
void Server::_marshallNotify(const MessageHeader &hdr, const std::span<std::byte> &payload) {
    kj::ArrayPtr<const capnp::word> message(reinterpret_cast<const capnp::word *>(payload.data()),
            payload.size() / sizeof(capnp::word));
    capnp::FlatArrayMessageReader reader(message);
    auto request = reader.getRoot<rpc::_proto::messages::NotifyRequest>();
    const std::string dec_path(request.getPath());
    const auto dec_key = request.getKey();

    auto retVal = this->implNotify(dec_path, dec_key);

    capnp::MallocMessageBuilder replyBuilder;
    auto reply = replyBuilder.initRoot<rpc::_proto::messages::NotifyResponse>();
    reply.setStatus(retVal);
    {
        auto rw = capnp::messageToFlatArray(replyBuilder);
        auto rb = rw.asBytes();
        const std::span<std::byte> rs(reinterpret_cast<std::byte *>(rb.begin()), rb.size());
        this->_doSendReply(hdr, rs);
    }
}
#pragma clang diagnostic pop
